<?php
/**
 * BridgeAttendedTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BridgeAttendedTransfer Class Doc Comment
 *
 * @category Class
 * @description Notification that an attended transfer has occurred.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BridgeAttendedTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BridgeAttendedTransfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transferer_first_leg' => '\Swagger\Client\Model\Channel',
        'transferer_second_leg' => '\Swagger\Client\Model\Channel',
        'replace_channel' => '\Swagger\Client\Model\Channel',
        'transferee' => '\Swagger\Client\Model\Channel',
        'transfer_target' => '\Swagger\Client\Model\Channel',
        'result' => 'string',
        'is_external' => 'bool',
        'transferer_first_leg_bridge' => '\Swagger\Client\Model\Bridge',
        'transferer_second_leg_bridge' => '\Swagger\Client\Model\Bridge',
        'destination_type' => 'string',
        'destination_bridge' => 'string',
        'destination_application' => 'string',
        'destination_link_first_leg' => '\Swagger\Client\Model\Channel',
        'destination_link_second_leg' => '\Swagger\Client\Model\Channel',
        'destination_threeway_channel' => '\Swagger\Client\Model\Channel',
        'destination_threeway_bridge' => '\Swagger\Client\Model\Bridge'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transferer_first_leg' => null,
        'transferer_second_leg' => null,
        'replace_channel' => null,
        'transferee' => null,
        'transfer_target' => null,
        'result' => null,
        'is_external' => null,
        'transferer_first_leg_bridge' => null,
        'transferer_second_leg_bridge' => null,
        'destination_type' => null,
        'destination_bridge' => null,
        'destination_application' => null,
        'destination_link_first_leg' => null,
        'destination_link_second_leg' => null,
        'destination_threeway_channel' => null,
        'destination_threeway_bridge' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transferer_first_leg' => 'transferer_first_leg',
        'transferer_second_leg' => 'transferer_second_leg',
        'replace_channel' => 'replace_channel',
        'transferee' => 'transferee',
        'transfer_target' => 'transfer_target',
        'result' => 'result',
        'is_external' => 'is_external',
        'transferer_first_leg_bridge' => 'transferer_first_leg_bridge',
        'transferer_second_leg_bridge' => 'transferer_second_leg_bridge',
        'destination_type' => 'destination_type',
        'destination_bridge' => 'destination_bridge',
        'destination_application' => 'destination_application',
        'destination_link_first_leg' => 'destination_link_first_leg',
        'destination_link_second_leg' => 'destination_link_second_leg',
        'destination_threeway_channel' => 'destination_threeway_channel',
        'destination_threeway_bridge' => 'destination_threeway_bridge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transferer_first_leg' => 'setTransfererFirstLeg',
        'transferer_second_leg' => 'setTransfererSecondLeg',
        'replace_channel' => 'setReplaceChannel',
        'transferee' => 'setTransferee',
        'transfer_target' => 'setTransferTarget',
        'result' => 'setResult',
        'is_external' => 'setIsExternal',
        'transferer_first_leg_bridge' => 'setTransfererFirstLegBridge',
        'transferer_second_leg_bridge' => 'setTransfererSecondLegBridge',
        'destination_type' => 'setDestinationType',
        'destination_bridge' => 'setDestinationBridge',
        'destination_application' => 'setDestinationApplication',
        'destination_link_first_leg' => 'setDestinationLinkFirstLeg',
        'destination_link_second_leg' => 'setDestinationLinkSecondLeg',
        'destination_threeway_channel' => 'setDestinationThreewayChannel',
        'destination_threeway_bridge' => 'setDestinationThreewayBridge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transferer_first_leg' => 'getTransfererFirstLeg',
        'transferer_second_leg' => 'getTransfererSecondLeg',
        'replace_channel' => 'getReplaceChannel',
        'transferee' => 'getTransferee',
        'transfer_target' => 'getTransferTarget',
        'result' => 'getResult',
        'is_external' => 'getIsExternal',
        'transferer_first_leg_bridge' => 'getTransfererFirstLegBridge',
        'transferer_second_leg_bridge' => 'getTransfererSecondLegBridge',
        'destination_type' => 'getDestinationType',
        'destination_bridge' => 'getDestinationBridge',
        'destination_application' => 'getDestinationApplication',
        'destination_link_first_leg' => 'getDestinationLinkFirstLeg',
        'destination_link_second_leg' => 'getDestinationLinkSecondLeg',
        'destination_threeway_channel' => 'getDestinationThreewayChannel',
        'destination_threeway_bridge' => 'getDestinationThreewayBridge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transferer_first_leg'] = isset($data['transferer_first_leg']) ? $data['transferer_first_leg'] : null;
        $this->container['transferer_second_leg'] = isset($data['transferer_second_leg']) ? $data['transferer_second_leg'] : null;
        $this->container['replace_channel'] = isset($data['replace_channel']) ? $data['replace_channel'] : null;
        $this->container['transferee'] = isset($data['transferee']) ? $data['transferee'] : null;
        $this->container['transfer_target'] = isset($data['transfer_target']) ? $data['transfer_target'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['is_external'] = isset($data['is_external']) ? $data['is_external'] : null;
        $this->container['transferer_first_leg_bridge'] = isset($data['transferer_first_leg_bridge']) ? $data['transferer_first_leg_bridge'] : null;
        $this->container['transferer_second_leg_bridge'] = isset($data['transferer_second_leg_bridge']) ? $data['transferer_second_leg_bridge'] : null;
        $this->container['destination_type'] = isset($data['destination_type']) ? $data['destination_type'] : null;
        $this->container['destination_bridge'] = isset($data['destination_bridge']) ? $data['destination_bridge'] : null;
        $this->container['destination_application'] = isset($data['destination_application']) ? $data['destination_application'] : null;
        $this->container['destination_link_first_leg'] = isset($data['destination_link_first_leg']) ? $data['destination_link_first_leg'] : null;
        $this->container['destination_link_second_leg'] = isset($data['destination_link_second_leg']) ? $data['destination_link_second_leg'] : null;
        $this->container['destination_threeway_channel'] = isset($data['destination_threeway_channel']) ? $data['destination_threeway_channel'] : null;
        $this->container['destination_threeway_bridge'] = isset($data['destination_threeway_bridge']) ? $data['destination_threeway_bridge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transferer_first_leg
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getTransfererFirstLeg()
    {
        return $this->container['transferer_first_leg'];
    }

    /**
     * Sets transferer_first_leg
     *
     * @param \Swagger\Client\Model\Channel $transferer_first_leg First leg of the transferer
     *
     * @return $this
     */
    public function setTransfererFirstLeg($transferer_first_leg)
    {
        $this->container['transferer_first_leg'] = $transferer_first_leg;

        return $this;
    }

    /**
     * Gets transferer_second_leg
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getTransfererSecondLeg()
    {
        return $this->container['transferer_second_leg'];
    }

    /**
     * Sets transferer_second_leg
     *
     * @param \Swagger\Client\Model\Channel $transferer_second_leg Second leg of the transferer
     *
     * @return $this
     */
    public function setTransfererSecondLeg($transferer_second_leg)
    {
        $this->container['transferer_second_leg'] = $transferer_second_leg;

        return $this;
    }

    /**
     * Gets replace_channel
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getReplaceChannel()
    {
        return $this->container['replace_channel'];
    }

    /**
     * Sets replace_channel
     *
     * @param \Swagger\Client\Model\Channel $replace_channel The channel that is replacing transferer_first_leg in the swap
     *
     * @return $this
     */
    public function setReplaceChannel($replace_channel)
    {
        $this->container['replace_channel'] = $replace_channel;

        return $this;
    }

    /**
     * Gets transferee
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getTransferee()
    {
        return $this->container['transferee'];
    }

    /**
     * Sets transferee
     *
     * @param \Swagger\Client\Model\Channel $transferee The channel that is being transferred
     *
     * @return $this
     */
    public function setTransferee($transferee)
    {
        $this->container['transferee'] = $transferee;

        return $this;
    }

    /**
     * Gets transfer_target
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getTransferTarget()
    {
        return $this->container['transfer_target'];
    }

    /**
     * Sets transfer_target
     *
     * @param \Swagger\Client\Model\Channel $transfer_target The channel that is being transferred to
     *
     * @return $this
     */
    public function setTransferTarget($transfer_target)
    {
        $this->container['transfer_target'] = $transfer_target;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result The result of the transfer attempt
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool $is_external Whether the transfer was externally initiated or not
     *
     * @return $this
     */
    public function setIsExternal($is_external)
    {
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets transferer_first_leg_bridge
     *
     * @return \Swagger\Client\Model\Bridge
     */
    public function getTransfererFirstLegBridge()
    {
        return $this->container['transferer_first_leg_bridge'];
    }

    /**
     * Sets transferer_first_leg_bridge
     *
     * @param \Swagger\Client\Model\Bridge $transferer_first_leg_bridge Bridge the transferer first leg is in
     *
     * @return $this
     */
    public function setTransfererFirstLegBridge($transferer_first_leg_bridge)
    {
        $this->container['transferer_first_leg_bridge'] = $transferer_first_leg_bridge;

        return $this;
    }

    /**
     * Gets transferer_second_leg_bridge
     *
     * @return \Swagger\Client\Model\Bridge
     */
    public function getTransfererSecondLegBridge()
    {
        return $this->container['transferer_second_leg_bridge'];
    }

    /**
     * Sets transferer_second_leg_bridge
     *
     * @param \Swagger\Client\Model\Bridge $transferer_second_leg_bridge Bridge the transferer second leg is in
     *
     * @return $this
     */
    public function setTransfererSecondLegBridge($transferer_second_leg_bridge)
    {
        $this->container['transferer_second_leg_bridge'] = $transferer_second_leg_bridge;

        return $this;
    }

    /**
     * Gets destination_type
     *
     * @return string
     */
    public function getDestinationType()
    {
        return $this->container['destination_type'];
    }

    /**
     * Sets destination_type
     *
     * @param string $destination_type How the transfer was accomplished
     *
     * @return $this
     */
    public function setDestinationType($destination_type)
    {
        $this->container['destination_type'] = $destination_type;

        return $this;
    }

    /**
     * Gets destination_bridge
     *
     * @return string
     */
    public function getDestinationBridge()
    {
        return $this->container['destination_bridge'];
    }

    /**
     * Sets destination_bridge
     *
     * @param string $destination_bridge Bridge that survived the merge result
     *
     * @return $this
     */
    public function setDestinationBridge($destination_bridge)
    {
        $this->container['destination_bridge'] = $destination_bridge;

        return $this;
    }

    /**
     * Gets destination_application
     *
     * @return string
     */
    public function getDestinationApplication()
    {
        return $this->container['destination_application'];
    }

    /**
     * Sets destination_application
     *
     * @param string $destination_application Application that has been transferred into
     *
     * @return $this
     */
    public function setDestinationApplication($destination_application)
    {
        $this->container['destination_application'] = $destination_application;

        return $this;
    }

    /**
     * Gets destination_link_first_leg
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getDestinationLinkFirstLeg()
    {
        return $this->container['destination_link_first_leg'];
    }

    /**
     * Sets destination_link_first_leg
     *
     * @param \Swagger\Client\Model\Channel $destination_link_first_leg First leg of a link transfer result
     *
     * @return $this
     */
    public function setDestinationLinkFirstLeg($destination_link_first_leg)
    {
        $this->container['destination_link_first_leg'] = $destination_link_first_leg;

        return $this;
    }

    /**
     * Gets destination_link_second_leg
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getDestinationLinkSecondLeg()
    {
        return $this->container['destination_link_second_leg'];
    }

    /**
     * Sets destination_link_second_leg
     *
     * @param \Swagger\Client\Model\Channel $destination_link_second_leg Second leg of a link transfer result
     *
     * @return $this
     */
    public function setDestinationLinkSecondLeg($destination_link_second_leg)
    {
        $this->container['destination_link_second_leg'] = $destination_link_second_leg;

        return $this;
    }

    /**
     * Gets destination_threeway_channel
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getDestinationThreewayChannel()
    {
        return $this->container['destination_threeway_channel'];
    }

    /**
     * Sets destination_threeway_channel
     *
     * @param \Swagger\Client\Model\Channel $destination_threeway_channel Transferer channel that survived the threeway result
     *
     * @return $this
     */
    public function setDestinationThreewayChannel($destination_threeway_channel)
    {
        $this->container['destination_threeway_channel'] = $destination_threeway_channel;

        return $this;
    }

    /**
     * Gets destination_threeway_bridge
     *
     * @return \Swagger\Client\Model\Bridge
     */
    public function getDestinationThreewayBridge()
    {
        return $this->container['destination_threeway_bridge'];
    }

    /**
     * Sets destination_threeway_bridge
     *
     * @param \Swagger\Client\Model\Bridge $destination_threeway_bridge Bridge that survived the threeway result
     *
     * @return $this
     */
    public function setDestinationThreewayBridge($destination_threeway_bridge)
    {
        $this->container['destination_threeway_bridge'] = $destination_threeway_bridge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


