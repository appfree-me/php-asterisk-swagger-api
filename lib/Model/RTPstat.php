<?php
/**
 * RTPstat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RTPstat Class Doc Comment
 *
 * @category Class
 * @description A statistics of a RTP.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RTPstat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RTPstat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'txcount' => '\Swagger\Client\Model\Int',
        'rxcount' => '\Swagger\Client\Model\Int',
        'txjitter' => 'double',
        'rxjitter' => 'double',
        'remote_maxjitter' => 'double',
        'remote_minjitter' => 'double',
        'remote_normdevjitter' => 'double',
        'remote_stdevjitter' => 'double',
        'local_maxjitter' => 'double',
        'local_minjitter' => 'double',
        'local_normdevjitter' => 'double',
        'local_stdevjitter' => 'double',
        'txploss' => '\Swagger\Client\Model\Int',
        'rxploss' => '\Swagger\Client\Model\Int',
        'remote_maxrxploss' => 'double',
        'remote_minrxploss' => 'double',
        'remote_normdevrxploss' => 'double',
        'remote_stdevrxploss' => 'double',
        'local_maxrxploss' => 'double',
        'local_minrxploss' => 'double',
        'local_normdevrxploss' => 'double',
        'local_stdevrxploss' => 'double',
        'rtt' => 'double',
        'maxrtt' => 'double',
        'minrtt' => 'double',
        'normdevrtt' => 'double',
        'stdevrtt' => 'double',
        'local_ssrc' => '\Swagger\Client\Model\Int',
        'remote_ssrc' => '\Swagger\Client\Model\Int',
        'txoctetcount' => '\Swagger\Client\Model\Int',
        'rxoctetcount' => '\Swagger\Client\Model\Int',
        'channel_uniqueid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'txcount' => null,
        'rxcount' => null,
        'txjitter' => null,
        'rxjitter' => null,
        'remote_maxjitter' => null,
        'remote_minjitter' => null,
        'remote_normdevjitter' => null,
        'remote_stdevjitter' => null,
        'local_maxjitter' => null,
        'local_minjitter' => null,
        'local_normdevjitter' => null,
        'local_stdevjitter' => null,
        'txploss' => null,
        'rxploss' => null,
        'remote_maxrxploss' => null,
        'remote_minrxploss' => null,
        'remote_normdevrxploss' => null,
        'remote_stdevrxploss' => null,
        'local_maxrxploss' => null,
        'local_minrxploss' => null,
        'local_normdevrxploss' => null,
        'local_stdevrxploss' => null,
        'rtt' => null,
        'maxrtt' => null,
        'minrtt' => null,
        'normdevrtt' => null,
        'stdevrtt' => null,
        'local_ssrc' => null,
        'remote_ssrc' => null,
        'txoctetcount' => null,
        'rxoctetcount' => null,
        'channel_uniqueid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'txcount' => 'txcount',
        'rxcount' => 'rxcount',
        'txjitter' => 'txjitter',
        'rxjitter' => 'rxjitter',
        'remote_maxjitter' => 'remote_maxjitter',
        'remote_minjitter' => 'remote_minjitter',
        'remote_normdevjitter' => 'remote_normdevjitter',
        'remote_stdevjitter' => 'remote_stdevjitter',
        'local_maxjitter' => 'local_maxjitter',
        'local_minjitter' => 'local_minjitter',
        'local_normdevjitter' => 'local_normdevjitter',
        'local_stdevjitter' => 'local_stdevjitter',
        'txploss' => 'txploss',
        'rxploss' => 'rxploss',
        'remote_maxrxploss' => 'remote_maxrxploss',
        'remote_minrxploss' => 'remote_minrxploss',
        'remote_normdevrxploss' => 'remote_normdevrxploss',
        'remote_stdevrxploss' => 'remote_stdevrxploss',
        'local_maxrxploss' => 'local_maxrxploss',
        'local_minrxploss' => 'local_minrxploss',
        'local_normdevrxploss' => 'local_normdevrxploss',
        'local_stdevrxploss' => 'local_stdevrxploss',
        'rtt' => 'rtt',
        'maxrtt' => 'maxrtt',
        'minrtt' => 'minrtt',
        'normdevrtt' => 'normdevrtt',
        'stdevrtt' => 'stdevrtt',
        'local_ssrc' => 'local_ssrc',
        'remote_ssrc' => 'remote_ssrc',
        'txoctetcount' => 'txoctetcount',
        'rxoctetcount' => 'rxoctetcount',
        'channel_uniqueid' => 'channel_uniqueid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'txcount' => 'setTxcount',
        'rxcount' => 'setRxcount',
        'txjitter' => 'setTxjitter',
        'rxjitter' => 'setRxjitter',
        'remote_maxjitter' => 'setRemoteMaxjitter',
        'remote_minjitter' => 'setRemoteMinjitter',
        'remote_normdevjitter' => 'setRemoteNormdevjitter',
        'remote_stdevjitter' => 'setRemoteStdevjitter',
        'local_maxjitter' => 'setLocalMaxjitter',
        'local_minjitter' => 'setLocalMinjitter',
        'local_normdevjitter' => 'setLocalNormdevjitter',
        'local_stdevjitter' => 'setLocalStdevjitter',
        'txploss' => 'setTxploss',
        'rxploss' => 'setRxploss',
        'remote_maxrxploss' => 'setRemoteMaxrxploss',
        'remote_minrxploss' => 'setRemoteMinrxploss',
        'remote_normdevrxploss' => 'setRemoteNormdevrxploss',
        'remote_stdevrxploss' => 'setRemoteStdevrxploss',
        'local_maxrxploss' => 'setLocalMaxrxploss',
        'local_minrxploss' => 'setLocalMinrxploss',
        'local_normdevrxploss' => 'setLocalNormdevrxploss',
        'local_stdevrxploss' => 'setLocalStdevrxploss',
        'rtt' => 'setRtt',
        'maxrtt' => 'setMaxrtt',
        'minrtt' => 'setMinrtt',
        'normdevrtt' => 'setNormdevrtt',
        'stdevrtt' => 'setStdevrtt',
        'local_ssrc' => 'setLocalSsrc',
        'remote_ssrc' => 'setRemoteSsrc',
        'txoctetcount' => 'setTxoctetcount',
        'rxoctetcount' => 'setRxoctetcount',
        'channel_uniqueid' => 'setChannelUniqueid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'txcount' => 'getTxcount',
        'rxcount' => 'getRxcount',
        'txjitter' => 'getTxjitter',
        'rxjitter' => 'getRxjitter',
        'remote_maxjitter' => 'getRemoteMaxjitter',
        'remote_minjitter' => 'getRemoteMinjitter',
        'remote_normdevjitter' => 'getRemoteNormdevjitter',
        'remote_stdevjitter' => 'getRemoteStdevjitter',
        'local_maxjitter' => 'getLocalMaxjitter',
        'local_minjitter' => 'getLocalMinjitter',
        'local_normdevjitter' => 'getLocalNormdevjitter',
        'local_stdevjitter' => 'getLocalStdevjitter',
        'txploss' => 'getTxploss',
        'rxploss' => 'getRxploss',
        'remote_maxrxploss' => 'getRemoteMaxrxploss',
        'remote_minrxploss' => 'getRemoteMinrxploss',
        'remote_normdevrxploss' => 'getRemoteNormdevrxploss',
        'remote_stdevrxploss' => 'getRemoteStdevrxploss',
        'local_maxrxploss' => 'getLocalMaxrxploss',
        'local_minrxploss' => 'getLocalMinrxploss',
        'local_normdevrxploss' => 'getLocalNormdevrxploss',
        'local_stdevrxploss' => 'getLocalStdevrxploss',
        'rtt' => 'getRtt',
        'maxrtt' => 'getMaxrtt',
        'minrtt' => 'getMinrtt',
        'normdevrtt' => 'getNormdevrtt',
        'stdevrtt' => 'getStdevrtt',
        'local_ssrc' => 'getLocalSsrc',
        'remote_ssrc' => 'getRemoteSsrc',
        'txoctetcount' => 'getTxoctetcount',
        'rxoctetcount' => 'getRxoctetcount',
        'channel_uniqueid' => 'getChannelUniqueid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['txcount'] = isset($data['txcount']) ? $data['txcount'] : null;
        $this->container['rxcount'] = isset($data['rxcount']) ? $data['rxcount'] : null;
        $this->container['txjitter'] = isset($data['txjitter']) ? $data['txjitter'] : null;
        $this->container['rxjitter'] = isset($data['rxjitter']) ? $data['rxjitter'] : null;
        $this->container['remote_maxjitter'] = isset($data['remote_maxjitter']) ? $data['remote_maxjitter'] : null;
        $this->container['remote_minjitter'] = isset($data['remote_minjitter']) ? $data['remote_minjitter'] : null;
        $this->container['remote_normdevjitter'] = isset($data['remote_normdevjitter']) ? $data['remote_normdevjitter'] : null;
        $this->container['remote_stdevjitter'] = isset($data['remote_stdevjitter']) ? $data['remote_stdevjitter'] : null;
        $this->container['local_maxjitter'] = isset($data['local_maxjitter']) ? $data['local_maxjitter'] : null;
        $this->container['local_minjitter'] = isset($data['local_minjitter']) ? $data['local_minjitter'] : null;
        $this->container['local_normdevjitter'] = isset($data['local_normdevjitter']) ? $data['local_normdevjitter'] : null;
        $this->container['local_stdevjitter'] = isset($data['local_stdevjitter']) ? $data['local_stdevjitter'] : null;
        $this->container['txploss'] = isset($data['txploss']) ? $data['txploss'] : null;
        $this->container['rxploss'] = isset($data['rxploss']) ? $data['rxploss'] : null;
        $this->container['remote_maxrxploss'] = isset($data['remote_maxrxploss']) ? $data['remote_maxrxploss'] : null;
        $this->container['remote_minrxploss'] = isset($data['remote_minrxploss']) ? $data['remote_minrxploss'] : null;
        $this->container['remote_normdevrxploss'] = isset($data['remote_normdevrxploss']) ? $data['remote_normdevrxploss'] : null;
        $this->container['remote_stdevrxploss'] = isset($data['remote_stdevrxploss']) ? $data['remote_stdevrxploss'] : null;
        $this->container['local_maxrxploss'] = isset($data['local_maxrxploss']) ? $data['local_maxrxploss'] : null;
        $this->container['local_minrxploss'] = isset($data['local_minrxploss']) ? $data['local_minrxploss'] : null;
        $this->container['local_normdevrxploss'] = isset($data['local_normdevrxploss']) ? $data['local_normdevrxploss'] : null;
        $this->container['local_stdevrxploss'] = isset($data['local_stdevrxploss']) ? $data['local_stdevrxploss'] : null;
        $this->container['rtt'] = isset($data['rtt']) ? $data['rtt'] : null;
        $this->container['maxrtt'] = isset($data['maxrtt']) ? $data['maxrtt'] : null;
        $this->container['minrtt'] = isset($data['minrtt']) ? $data['minrtt'] : null;
        $this->container['normdevrtt'] = isset($data['normdevrtt']) ? $data['normdevrtt'] : null;
        $this->container['stdevrtt'] = isset($data['stdevrtt']) ? $data['stdevrtt'] : null;
        $this->container['local_ssrc'] = isset($data['local_ssrc']) ? $data['local_ssrc'] : null;
        $this->container['remote_ssrc'] = isset($data['remote_ssrc']) ? $data['remote_ssrc'] : null;
        $this->container['txoctetcount'] = isset($data['txoctetcount']) ? $data['txoctetcount'] : null;
        $this->container['rxoctetcount'] = isset($data['rxoctetcount']) ? $data['rxoctetcount'] : null;
        $this->container['channel_uniqueid'] = isset($data['channel_uniqueid']) ? $data['channel_uniqueid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets txcount
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getTxcount()
    {
        return $this->container['txcount'];
    }

    /**
     * Sets txcount
     *
     * @param \Swagger\Client\Model\Int $txcount Number of packets transmitted.
     *
     * @return $this
     */
    public function setTxcount($txcount)
    {
        $this->container['txcount'] = $txcount;

        return $this;
    }

    /**
     * Gets rxcount
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getRxcount()
    {
        return $this->container['rxcount'];
    }

    /**
     * Sets rxcount
     *
     * @param \Swagger\Client\Model\Int $rxcount Number of packets received.
     *
     * @return $this
     */
    public function setRxcount($rxcount)
    {
        $this->container['rxcount'] = $rxcount;

        return $this;
    }

    /**
     * Gets txjitter
     *
     * @return double
     */
    public function getTxjitter()
    {
        return $this->container['txjitter'];
    }

    /**
     * Sets txjitter
     *
     * @param double $txjitter Jitter on transmitted packets.
     *
     * @return $this
     */
    public function setTxjitter($txjitter)
    {
        $this->container['txjitter'] = $txjitter;

        return $this;
    }

    /**
     * Gets rxjitter
     *
     * @return double
     */
    public function getRxjitter()
    {
        return $this->container['rxjitter'];
    }

    /**
     * Sets rxjitter
     *
     * @param double $rxjitter Jitter on received packets.
     *
     * @return $this
     */
    public function setRxjitter($rxjitter)
    {
        $this->container['rxjitter'] = $rxjitter;

        return $this;
    }

    /**
     * Gets remote_maxjitter
     *
     * @return double
     */
    public function getRemoteMaxjitter()
    {
        return $this->container['remote_maxjitter'];
    }

    /**
     * Sets remote_maxjitter
     *
     * @param double $remote_maxjitter Maximum jitter on remote side.
     *
     * @return $this
     */
    public function setRemoteMaxjitter($remote_maxjitter)
    {
        $this->container['remote_maxjitter'] = $remote_maxjitter;

        return $this;
    }

    /**
     * Gets remote_minjitter
     *
     * @return double
     */
    public function getRemoteMinjitter()
    {
        return $this->container['remote_minjitter'];
    }

    /**
     * Sets remote_minjitter
     *
     * @param double $remote_minjitter Minimum jitter on remote side.
     *
     * @return $this
     */
    public function setRemoteMinjitter($remote_minjitter)
    {
        $this->container['remote_minjitter'] = $remote_minjitter;

        return $this;
    }

    /**
     * Gets remote_normdevjitter
     *
     * @return double
     */
    public function getRemoteNormdevjitter()
    {
        return $this->container['remote_normdevjitter'];
    }

    /**
     * Sets remote_normdevjitter
     *
     * @param double $remote_normdevjitter Average jitter on remote side.
     *
     * @return $this
     */
    public function setRemoteNormdevjitter($remote_normdevjitter)
    {
        $this->container['remote_normdevjitter'] = $remote_normdevjitter;

        return $this;
    }

    /**
     * Gets remote_stdevjitter
     *
     * @return double
     */
    public function getRemoteStdevjitter()
    {
        return $this->container['remote_stdevjitter'];
    }

    /**
     * Sets remote_stdevjitter
     *
     * @param double $remote_stdevjitter Standard deviation jitter on remote side.
     *
     * @return $this
     */
    public function setRemoteStdevjitter($remote_stdevjitter)
    {
        $this->container['remote_stdevjitter'] = $remote_stdevjitter;

        return $this;
    }

    /**
     * Gets local_maxjitter
     *
     * @return double
     */
    public function getLocalMaxjitter()
    {
        return $this->container['local_maxjitter'];
    }

    /**
     * Sets local_maxjitter
     *
     * @param double $local_maxjitter Maximum jitter on local side.
     *
     * @return $this
     */
    public function setLocalMaxjitter($local_maxjitter)
    {
        $this->container['local_maxjitter'] = $local_maxjitter;

        return $this;
    }

    /**
     * Gets local_minjitter
     *
     * @return double
     */
    public function getLocalMinjitter()
    {
        return $this->container['local_minjitter'];
    }

    /**
     * Sets local_minjitter
     *
     * @param double $local_minjitter Minimum jitter on local side.
     *
     * @return $this
     */
    public function setLocalMinjitter($local_minjitter)
    {
        $this->container['local_minjitter'] = $local_minjitter;

        return $this;
    }

    /**
     * Gets local_normdevjitter
     *
     * @return double
     */
    public function getLocalNormdevjitter()
    {
        return $this->container['local_normdevjitter'];
    }

    /**
     * Sets local_normdevjitter
     *
     * @param double $local_normdevjitter Average jitter on local side.
     *
     * @return $this
     */
    public function setLocalNormdevjitter($local_normdevjitter)
    {
        $this->container['local_normdevjitter'] = $local_normdevjitter;

        return $this;
    }

    /**
     * Gets local_stdevjitter
     *
     * @return double
     */
    public function getLocalStdevjitter()
    {
        return $this->container['local_stdevjitter'];
    }

    /**
     * Sets local_stdevjitter
     *
     * @param double $local_stdevjitter Standard deviation jitter on local side.
     *
     * @return $this
     */
    public function setLocalStdevjitter($local_stdevjitter)
    {
        $this->container['local_stdevjitter'] = $local_stdevjitter;

        return $this;
    }

    /**
     * Gets txploss
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getTxploss()
    {
        return $this->container['txploss'];
    }

    /**
     * Sets txploss
     *
     * @param \Swagger\Client\Model\Int $txploss Number of transmitted packets lost.
     *
     * @return $this
     */
    public function setTxploss($txploss)
    {
        $this->container['txploss'] = $txploss;

        return $this;
    }

    /**
     * Gets rxploss
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getRxploss()
    {
        return $this->container['rxploss'];
    }

    /**
     * Sets rxploss
     *
     * @param \Swagger\Client\Model\Int $rxploss Number of received packets lost.
     *
     * @return $this
     */
    public function setRxploss($rxploss)
    {
        $this->container['rxploss'] = $rxploss;

        return $this;
    }

    /**
     * Gets remote_maxrxploss
     *
     * @return double
     */
    public function getRemoteMaxrxploss()
    {
        return $this->container['remote_maxrxploss'];
    }

    /**
     * Sets remote_maxrxploss
     *
     * @param double $remote_maxrxploss Maximum number of packets lost on remote side.
     *
     * @return $this
     */
    public function setRemoteMaxrxploss($remote_maxrxploss)
    {
        $this->container['remote_maxrxploss'] = $remote_maxrxploss;

        return $this;
    }

    /**
     * Gets remote_minrxploss
     *
     * @return double
     */
    public function getRemoteMinrxploss()
    {
        return $this->container['remote_minrxploss'];
    }

    /**
     * Sets remote_minrxploss
     *
     * @param double $remote_minrxploss Minimum number of packets lost on remote side.
     *
     * @return $this
     */
    public function setRemoteMinrxploss($remote_minrxploss)
    {
        $this->container['remote_minrxploss'] = $remote_minrxploss;

        return $this;
    }

    /**
     * Gets remote_normdevrxploss
     *
     * @return double
     */
    public function getRemoteNormdevrxploss()
    {
        return $this->container['remote_normdevrxploss'];
    }

    /**
     * Sets remote_normdevrxploss
     *
     * @param double $remote_normdevrxploss Average number of packets lost on remote side.
     *
     * @return $this
     */
    public function setRemoteNormdevrxploss($remote_normdevrxploss)
    {
        $this->container['remote_normdevrxploss'] = $remote_normdevrxploss;

        return $this;
    }

    /**
     * Gets remote_stdevrxploss
     *
     * @return double
     */
    public function getRemoteStdevrxploss()
    {
        return $this->container['remote_stdevrxploss'];
    }

    /**
     * Sets remote_stdevrxploss
     *
     * @param double $remote_stdevrxploss Standard deviation packets lost on remote side.
     *
     * @return $this
     */
    public function setRemoteStdevrxploss($remote_stdevrxploss)
    {
        $this->container['remote_stdevrxploss'] = $remote_stdevrxploss;

        return $this;
    }

    /**
     * Gets local_maxrxploss
     *
     * @return double
     */
    public function getLocalMaxrxploss()
    {
        return $this->container['local_maxrxploss'];
    }

    /**
     * Sets local_maxrxploss
     *
     * @param double $local_maxrxploss Maximum number of packets lost on local side.
     *
     * @return $this
     */
    public function setLocalMaxrxploss($local_maxrxploss)
    {
        $this->container['local_maxrxploss'] = $local_maxrxploss;

        return $this;
    }

    /**
     * Gets local_minrxploss
     *
     * @return double
     */
    public function getLocalMinrxploss()
    {
        return $this->container['local_minrxploss'];
    }

    /**
     * Sets local_minrxploss
     *
     * @param double $local_minrxploss Minimum number of packets lost on local side.
     *
     * @return $this
     */
    public function setLocalMinrxploss($local_minrxploss)
    {
        $this->container['local_minrxploss'] = $local_minrxploss;

        return $this;
    }

    /**
     * Gets local_normdevrxploss
     *
     * @return double
     */
    public function getLocalNormdevrxploss()
    {
        return $this->container['local_normdevrxploss'];
    }

    /**
     * Sets local_normdevrxploss
     *
     * @param double $local_normdevrxploss Average number of packets lost on local side.
     *
     * @return $this
     */
    public function setLocalNormdevrxploss($local_normdevrxploss)
    {
        $this->container['local_normdevrxploss'] = $local_normdevrxploss;

        return $this;
    }

    /**
     * Gets local_stdevrxploss
     *
     * @return double
     */
    public function getLocalStdevrxploss()
    {
        return $this->container['local_stdevrxploss'];
    }

    /**
     * Sets local_stdevrxploss
     *
     * @param double $local_stdevrxploss Standard deviation packets lost on local side.
     *
     * @return $this
     */
    public function setLocalStdevrxploss($local_stdevrxploss)
    {
        $this->container['local_stdevrxploss'] = $local_stdevrxploss;

        return $this;
    }

    /**
     * Gets rtt
     *
     * @return double
     */
    public function getRtt()
    {
        return $this->container['rtt'];
    }

    /**
     * Sets rtt
     *
     * @param double $rtt Total round trip time.
     *
     * @return $this
     */
    public function setRtt($rtt)
    {
        $this->container['rtt'] = $rtt;

        return $this;
    }

    /**
     * Gets maxrtt
     *
     * @return double
     */
    public function getMaxrtt()
    {
        return $this->container['maxrtt'];
    }

    /**
     * Sets maxrtt
     *
     * @param double $maxrtt Maximum round trip time.
     *
     * @return $this
     */
    public function setMaxrtt($maxrtt)
    {
        $this->container['maxrtt'] = $maxrtt;

        return $this;
    }

    /**
     * Gets minrtt
     *
     * @return double
     */
    public function getMinrtt()
    {
        return $this->container['minrtt'];
    }

    /**
     * Sets minrtt
     *
     * @param double $minrtt Minimum round trip time.
     *
     * @return $this
     */
    public function setMinrtt($minrtt)
    {
        $this->container['minrtt'] = $minrtt;

        return $this;
    }

    /**
     * Gets normdevrtt
     *
     * @return double
     */
    public function getNormdevrtt()
    {
        return $this->container['normdevrtt'];
    }

    /**
     * Sets normdevrtt
     *
     * @param double $normdevrtt Average round trip time.
     *
     * @return $this
     */
    public function setNormdevrtt($normdevrtt)
    {
        $this->container['normdevrtt'] = $normdevrtt;

        return $this;
    }

    /**
     * Gets stdevrtt
     *
     * @return double
     */
    public function getStdevrtt()
    {
        return $this->container['stdevrtt'];
    }

    /**
     * Sets stdevrtt
     *
     * @param double $stdevrtt Standard deviation round trip time.
     *
     * @return $this
     */
    public function setStdevrtt($stdevrtt)
    {
        $this->container['stdevrtt'] = $stdevrtt;

        return $this;
    }

    /**
     * Gets local_ssrc
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getLocalSsrc()
    {
        return $this->container['local_ssrc'];
    }

    /**
     * Sets local_ssrc
     *
     * @param \Swagger\Client\Model\Int $local_ssrc Our SSRC.
     *
     * @return $this
     */
    public function setLocalSsrc($local_ssrc)
    {
        $this->container['local_ssrc'] = $local_ssrc;

        return $this;
    }

    /**
     * Gets remote_ssrc
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getRemoteSsrc()
    {
        return $this->container['remote_ssrc'];
    }

    /**
     * Sets remote_ssrc
     *
     * @param \Swagger\Client\Model\Int $remote_ssrc Their SSRC.
     *
     * @return $this
     */
    public function setRemoteSsrc($remote_ssrc)
    {
        $this->container['remote_ssrc'] = $remote_ssrc;

        return $this;
    }

    /**
     * Gets txoctetcount
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getTxoctetcount()
    {
        return $this->container['txoctetcount'];
    }

    /**
     * Sets txoctetcount
     *
     * @param \Swagger\Client\Model\Int $txoctetcount Number of octets transmitted.
     *
     * @return $this
     */
    public function setTxoctetcount($txoctetcount)
    {
        $this->container['txoctetcount'] = $txoctetcount;

        return $this;
    }

    /**
     * Gets rxoctetcount
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getRxoctetcount()
    {
        return $this->container['rxoctetcount'];
    }

    /**
     * Sets rxoctetcount
     *
     * @param \Swagger\Client\Model\Int $rxoctetcount Number of octets received.
     *
     * @return $this
     */
    public function setRxoctetcount($rxoctetcount)
    {
        $this->container['rxoctetcount'] = $rxoctetcount;

        return $this;
    }

    /**
     * Gets channel_uniqueid
     *
     * @return string
     */
    public function getChannelUniqueid()
    {
        return $this->container['channel_uniqueid'];
    }

    /**
     * Sets channel_uniqueid
     *
     * @param string $channel_uniqueid The Asterisk channel's unique ID that owns this instance.
     *
     * @return $this
     */
    public function setChannelUniqueid($channel_uniqueid)
    {
        $this->container['channel_uniqueid'] = $channel_uniqueid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


