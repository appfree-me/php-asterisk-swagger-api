<?php
/**
 * BridgeBlindTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BridgeBlindTransfer Class Doc Comment
 *
 * @category Class
 * @description Notification that a blind transfer has occurred.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BridgeBlindTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BridgeBlindTransfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel' => '\Swagger\Client\Model\Channel',
        'replace_channel' => '\Swagger\Client\Model\Channel',
        'transferee' => '\Swagger\Client\Model\Channel',
        'exten' => 'string',
        'context' => 'string',
        'result' => 'string',
        'is_external' => 'bool',
        'bridge' => '\Swagger\Client\Model\Bridge'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel' => null,
        'replace_channel' => null,
        'transferee' => null,
        'exten' => null,
        'context' => null,
        'result' => null,
        'is_external' => null,
        'bridge' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'replace_channel' => 'replace_channel',
        'transferee' => 'transferee',
        'exten' => 'exten',
        'context' => 'context',
        'result' => 'result',
        'is_external' => 'is_external',
        'bridge' => 'bridge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'replace_channel' => 'setReplaceChannel',
        'transferee' => 'setTransferee',
        'exten' => 'setExten',
        'context' => 'setContext',
        'result' => 'setResult',
        'is_external' => 'setIsExternal',
        'bridge' => 'setBridge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'replace_channel' => 'getReplaceChannel',
        'transferee' => 'getTransferee',
        'exten' => 'getExten',
        'context' => 'getContext',
        'result' => 'getResult',
        'is_external' => 'getIsExternal',
        'bridge' => 'getBridge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['replace_channel'] = isset($data['replace_channel']) ? $data['replace_channel'] : null;
        $this->container['transferee'] = isset($data['transferee']) ? $data['transferee'] : null;
        $this->container['exten'] = isset($data['exten']) ? $data['exten'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['is_external'] = isset($data['is_external']) ? $data['is_external'] : null;
        $this->container['bridge'] = isset($data['bridge']) ? $data['bridge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Swagger\Client\Model\Channel $channel The channel performing the blind transfer
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets replace_channel
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getReplaceChannel()
    {
        return $this->container['replace_channel'];
    }

    /**
     * Sets replace_channel
     *
     * @param \Swagger\Client\Model\Channel $replace_channel The channel that is replacing transferer when the transferee(s) can not be transferred directly
     *
     * @return $this
     */
    public function setReplaceChannel($replace_channel)
    {
        $this->container['replace_channel'] = $replace_channel;

        return $this;
    }

    /**
     * Gets transferee
     *
     * @return \Swagger\Client\Model\Channel
     */
    public function getTransferee()
    {
        return $this->container['transferee'];
    }

    /**
     * Sets transferee
     *
     * @param \Swagger\Client\Model\Channel $transferee The channel that is being transferred
     *
     * @return $this
     */
    public function setTransferee($transferee)
    {
        $this->container['transferee'] = $transferee;

        return $this;
    }

    /**
     * Gets exten
     *
     * @return string
     */
    public function getExten()
    {
        return $this->container['exten'];
    }

    /**
     * Sets exten
     *
     * @param string $exten The extension transferred to
     *
     * @return $this
     */
    public function setExten($exten)
    {
        $this->container['exten'] = $exten;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context The context transferred to
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result The result of the transfer attempt
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool $is_external Whether the transfer was externally initiated or not
     *
     * @return $this
     */
    public function setIsExternal($is_external)
    {
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets bridge
     *
     * @return \Swagger\Client\Model\Bridge
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param \Swagger\Client\Model\Bridge $bridge The bridge being transferred
     *
     * @return $this
     */
    public function setBridge($bridge)
    {
        $this->container['bridge'] = $bridge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


