<?php
/**
 * ConfigInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigInfo Class Doc Comment
 *
 * @category Class
 * @description Info about Asterisk configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'default_language' => 'string',
        'max_channels' => '\Swagger\Client\Model\Int',
        'max_open_files' => '\Swagger\Client\Model\Int',
        'max_load' => 'double',
        'setid' => '\Swagger\Client\Model\SetId'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'default_language' => null,
        'max_channels' => null,
        'max_open_files' => null,
        'max_load' => null,
        'setid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'default_language' => 'default_language',
        'max_channels' => 'max_channels',
        'max_open_files' => 'max_open_files',
        'max_load' => 'max_load',
        'setid' => 'setid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'default_language' => 'setDefaultLanguage',
        'max_channels' => 'setMaxChannels',
        'max_open_files' => 'setMaxOpenFiles',
        'max_load' => 'setMaxLoad',
        'setid' => 'setSetid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'default_language' => 'getDefaultLanguage',
        'max_channels' => 'getMaxChannels',
        'max_open_files' => 'getMaxOpenFiles',
        'max_load' => 'getMaxLoad',
        'setid' => 'getSetid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['default_language'] = isset($data['default_language']) ? $data['default_language'] : null;
        $this->container['max_channels'] = isset($data['max_channels']) ? $data['max_channels'] : null;
        $this->container['max_open_files'] = isset($data['max_open_files']) ? $data['max_open_files'] : null;
        $this->container['max_load'] = isset($data['max_load']) ? $data['max_load'] : null;
        $this->container['setid'] = isset($data['setid']) ? $data['setid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Asterisk system name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string $default_language Default language for media playback.
     *
     * @return $this
     */
    public function setDefaultLanguage($default_language)
    {
        $this->container['default_language'] = $default_language;

        return $this;
    }

    /**
     * Gets max_channels
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getMaxChannels()
    {
        return $this->container['max_channels'];
    }

    /**
     * Sets max_channels
     *
     * @param \Swagger\Client\Model\Int $max_channels Maximum number of simultaneous channels.
     *
     * @return $this
     */
    public function setMaxChannels($max_channels)
    {
        $this->container['max_channels'] = $max_channels;

        return $this;
    }

    /**
     * Gets max_open_files
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getMaxOpenFiles()
    {
        return $this->container['max_open_files'];
    }

    /**
     * Sets max_open_files
     *
     * @param \Swagger\Client\Model\Int $max_open_files Maximum number of open file handles (files, sockets).
     *
     * @return $this
     */
    public function setMaxOpenFiles($max_open_files)
    {
        $this->container['max_open_files'] = $max_open_files;

        return $this;
    }

    /**
     * Gets max_load
     *
     * @return double
     */
    public function getMaxLoad()
    {
        return $this->container['max_load'];
    }

    /**
     * Sets max_load
     *
     * @param double $max_load Maximum load avg on system.
     *
     * @return $this
     */
    public function setMaxLoad($max_load)
    {
        $this->container['max_load'] = $max_load;

        return $this;
    }

    /**
     * Gets setid
     *
     * @return \Swagger\Client\Model\SetId
     */
    public function getSetid()
    {
        return $this->container['setid'];
    }

    /**
     * Sets setid
     *
     * @param \Swagger\Client\Model\SetId $setid Effective user/group id for running Asterisk.
     *
     * @return $this
     */
    public function setSetid($setid)
    {
        $this->container['setid'] = $setid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


