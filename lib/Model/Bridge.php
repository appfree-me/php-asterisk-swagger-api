<?php
/**
 * Bridge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Bridge Class Doc Comment
 *
 * @category Class
 * @description The merging of media from one or more channels.  Everyone on the bridge receives the same audio.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Bridge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Bridge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'technology' => 'string',
        'bridge_type' => 'string',
        'bridge_class' => 'string',
        'creator' => 'string',
        'name' => 'string',
        'channels' => '\Swagger\Client\Model\ListString',
        'video_mode' => 'string',
        'video_source_id' => 'string',
        'creationtime' => '\Swagger\Client\Model\\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'technology' => null,
        'bridge_type' => null,
        'bridge_class' => null,
        'creator' => null,
        'name' => null,
        'channels' => null,
        'video_mode' => null,
        'video_source_id' => null,
        'creationtime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'technology' => 'technology',
        'bridge_type' => 'bridge_type',
        'bridge_class' => 'bridge_class',
        'creator' => 'creator',
        'name' => 'name',
        'channels' => 'channels',
        'video_mode' => 'video_mode',
        'video_source_id' => 'video_source_id',
        'creationtime' => 'creationtime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'technology' => 'setTechnology',
        'bridge_type' => 'setBridgeType',
        'bridge_class' => 'setBridgeClass',
        'creator' => 'setCreator',
        'name' => 'setName',
        'channels' => 'setChannels',
        'video_mode' => 'setVideoMode',
        'video_source_id' => 'setVideoSourceId',
        'creationtime' => 'setCreationtime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'technology' => 'getTechnology',
        'bridge_type' => 'getBridgeType',
        'bridge_class' => 'getBridgeClass',
        'creator' => 'getCreator',
        'name' => 'getName',
        'channels' => 'getChannels',
        'video_mode' => 'getVideoMode',
        'video_source_id' => 'getVideoSourceId',
        'creationtime' => 'getCreationtime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['technology'] = isset($data['technology']) ? $data['technology'] : null;
        $this->container['bridge_type'] = isset($data['bridge_type']) ? $data['bridge_type'] : null;
        $this->container['bridge_class'] = isset($data['bridge_class']) ? $data['bridge_class'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['video_mode'] = isset($data['video_mode']) ? $data['video_mode'] : null;
        $this->container['video_source_id'] = isset($data['video_source_id']) ? $data['video_source_id'] : null;
        $this->container['creationtime'] = isset($data['creationtime']) ? $data['creationtime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for this bridge
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets technology
     *
     * @return string
     */
    public function getTechnology()
    {
        return $this->container['technology'];
    }

    /**
     * Sets technology
     *
     * @param string $technology Name of the current bridging technology
     *
     * @return $this
     */
    public function setTechnology($technology)
    {
        $this->container['technology'] = $technology;

        return $this;
    }

    /**
     * Gets bridge_type
     *
     * @return string
     */
    public function getBridgeType()
    {
        return $this->container['bridge_type'];
    }

    /**
     * Sets bridge_type
     *
     * @param string $bridge_type Type of bridge technology
     *
     * @return $this
     */
    public function setBridgeType($bridge_type)
    {
        $this->container['bridge_type'] = $bridge_type;

        return $this;
    }

    /**
     * Gets bridge_class
     *
     * @return string
     */
    public function getBridgeClass()
    {
        return $this->container['bridge_class'];
    }

    /**
     * Sets bridge_class
     *
     * @param string $bridge_class Bridging class
     *
     * @return $this
     */
    public function setBridgeClass($bridge_class)
    {
        $this->container['bridge_class'] = $bridge_class;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator Entity that created the bridge
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name the creator gave the bridge
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\ListString
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\ListString $channels Ids of channels participating in this bridge
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets video_mode
     *
     * @return string
     */
    public function getVideoMode()
    {
        return $this->container['video_mode'];
    }

    /**
     * Sets video_mode
     *
     * @param string $video_mode The video mode the bridge is using. One of 'none', 'talker', 'sfu', or 'single'.
     *
     * @return $this
     */
    public function setVideoMode($video_mode)
    {
        $this->container['video_mode'] = $video_mode;

        return $this;
    }

    /**
     * Gets video_source_id
     *
     * @return string
     */
    public function getVideoSourceId()
    {
        return $this->container['video_source_id'];
    }

    /**
     * Sets video_source_id
     *
     * @param string $video_source_id The ID of the channel that is the source of video in this bridge, if one exists.
     *
     * @return $this
     */
    public function setVideoSourceId($video_source_id)
    {
        $this->container['video_source_id'] = $video_source_id;

        return $this;
    }

    /**
     * Gets creationtime
     *
     * @return \Swagger\Client\Model\\DateTime
     */
    public function getCreationtime()
    {
        return $this->container['creationtime'];
    }

    /**
     * Sets creationtime
     *
     * @param \Swagger\Client\Model\\DateTime $creationtime Timestamp when bridge was created
     *
     * @return $this
     */
    public function setCreationtime($creationtime)
    {
        $this->container['creationtime'] = $creationtime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


