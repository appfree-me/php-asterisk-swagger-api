<?php
/**
 * Channel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Channel Class Doc Comment
 *
 * @category Class
 * @description A specific communication connection between Asterisk and an Endpoint.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Channel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'protocol_id' => 'string',
        'name' => 'string',
        'state' => 'string',
        'caller' => '\Swagger\Client\Model\CallerID',
        'connected' => '\Swagger\Client\Model\CallerID',
        'accountcode' => 'string',
        'dialplan' => '\Swagger\Client\Model\DialplanCEP',
        'creationtime' => '\Swagger\Client\Model\\DateTime',
        'language' => 'string',
        'channelvars' => 'object',
        'caller_rdnis' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'protocol_id' => null,
        'name' => null,
        'state' => null,
        'caller' => null,
        'connected' => null,
        'accountcode' => null,
        'dialplan' => null,
        'creationtime' => null,
        'language' => null,
        'channelvars' => null,
        'caller_rdnis' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'protocol_id' => 'protocol_id',
        'name' => 'name',
        'state' => 'state',
        'caller' => 'caller',
        'connected' => 'connected',
        'accountcode' => 'accountcode',
        'dialplan' => 'dialplan',
        'creationtime' => 'creationtime',
        'language' => 'language',
        'channelvars' => 'channelvars',
        'caller_rdnis' => 'caller_rdnis'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'protocol_id' => 'setProtocolId',
        'name' => 'setName',
        'state' => 'setState',
        'caller' => 'setCaller',
        'connected' => 'setConnected',
        'accountcode' => 'setAccountcode',
        'dialplan' => 'setDialplan',
        'creationtime' => 'setCreationtime',
        'language' => 'setLanguage',
        'channelvars' => 'setChannelvars',
        'caller_rdnis' => 'setCallerRdnis'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'protocol_id' => 'getProtocolId',
        'name' => 'getName',
        'state' => 'getState',
        'caller' => 'getCaller',
        'connected' => 'getConnected',
        'accountcode' => 'getAccountcode',
        'dialplan' => 'getDialplan',
        'creationtime' => 'getCreationtime',
        'language' => 'getLanguage',
        'channelvars' => 'getChannelvars',
        'caller_rdnis' => 'getCallerRdnis'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['protocol_id'] = isset($data['protocol_id']) ? $data['protocol_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['caller'] = isset($data['caller']) ? $data['caller'] : null;
        $this->container['connected'] = isset($data['connected']) ? $data['connected'] : null;
        $this->container['accountcode'] = isset($data['accountcode']) ? $data['accountcode'] : null;
        $this->container['dialplan'] = isset($data['dialplan']) ? $data['dialplan'] : null;
        $this->container['creationtime'] = isset($data['creationtime']) ? $data['creationtime'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['channelvars'] = isset($data['channelvars']) ? $data['channelvars'] : null;
        $this->container['caller_rdnis'] = isset($data['caller_rdnis']) ? $data['caller_rdnis'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier of the channel.  This is the same as the Uniqueid field in AMI.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets protocol_id
     *
     * @return string
     */
    public function getProtocolId()
    {
        return $this->container['protocol_id'];
    }

    /**
     * Sets protocol_id
     *
     * @param string $protocol_id Protocol id from underlying channel driver (i.e. Call-ID for chan_sip/chan_pjsip; will be empty if not applicable or not implemented by driver).
     *
     * @return $this
     */
    public function setProtocolId($protocol_id)
    {
        $this->container['protocol_id'] = $protocol_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the channel (i.e. SIP/foo-0000a7e3)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets caller
     *
     * @return \Swagger\Client\Model\CallerID
     */
    public function getCaller()
    {
        return $this->container['caller'];
    }

    /**
     * Sets caller
     *
     * @param \Swagger\Client\Model\CallerID $caller caller
     *
     * @return $this
     */
    public function setCaller($caller)
    {
        $this->container['caller'] = $caller;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return \Swagger\Client\Model\CallerID
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param \Swagger\Client\Model\CallerID $connected connected
     *
     * @return $this
     */
    public function setConnected($connected)
    {
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets accountcode
     *
     * @return string
     */
    public function getAccountcode()
    {
        return $this->container['accountcode'];
    }

    /**
     * Sets accountcode
     *
     * @param string $accountcode accountcode
     *
     * @return $this
     */
    public function setAccountcode($accountcode)
    {
        $this->container['accountcode'] = $accountcode;

        return $this;
    }

    /**
     * Gets dialplan
     *
     * @return \Swagger\Client\Model\DialplanCEP
     */
    public function getDialplan()
    {
        return $this->container['dialplan'];
    }

    /**
     * Sets dialplan
     *
     * @param \Swagger\Client\Model\DialplanCEP $dialplan Current location in the dialplan
     *
     * @return $this
     */
    public function setDialplan($dialplan)
    {
        $this->container['dialplan'] = $dialplan;

        return $this;
    }

    /**
     * Gets creationtime
     *
     * @return \Swagger\Client\Model\\DateTime
     */
    public function getCreationtime()
    {
        return $this->container['creationtime'];
    }

    /**
     * Sets creationtime
     *
     * @param \Swagger\Client\Model\\DateTime $creationtime Timestamp when channel was created
     *
     * @return $this
     */
    public function setCreationtime($creationtime)
    {
        $this->container['creationtime'] = $creationtime;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The default spoken language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets channelvars
     *
     * @return object
     */
    public function getChannelvars()
    {
        return $this->container['channelvars'];
    }

    /**
     * Sets channelvars
     *
     * @param object $channelvars Channel variables
     *
     * @return $this
     */
    public function setChannelvars($channelvars)
    {
        $this->container['channelvars'] = $channelvars;

        return $this;
    }

    /**
     * Gets caller_rdnis
     *
     * @return string
     */
    public function getCallerRdnis()
    {
        return $this->container['caller_rdnis'];
    }

    /**
     * Sets caller_rdnis
     *
     * @param string $caller_rdnis The Caller ID RDNIS
     *
     * @return $this
     */
    public function setCallerRdnis($caller_rdnis)
    {
        $this->container['caller_rdnis'] = $caller_rdnis;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


