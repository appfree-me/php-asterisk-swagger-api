<?php
/**
 * Application
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Application Class Doc Comment
 *
 * @category Class
 * @description Details of a Stasis application
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Application implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Application';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'channel_ids' => '\Swagger\Client\Model\ListString',
        'bridge_ids' => '\Swagger\Client\Model\ListString',
        'endpoint_ids' => '\Swagger\Client\Model\ListString',
        'device_names' => '\Swagger\Client\Model\ListString',
        'events_allowed' => '\Swagger\Client\Model\ListObject',
        'events_disallowed' => '\Swagger\Client\Model\ListObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'channel_ids' => null,
        'bridge_ids' => null,
        'endpoint_ids' => null,
        'device_names' => null,
        'events_allowed' => null,
        'events_disallowed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'channel_ids' => 'channel_ids',
        'bridge_ids' => 'bridge_ids',
        'endpoint_ids' => 'endpoint_ids',
        'device_names' => 'device_names',
        'events_allowed' => 'events_allowed',
        'events_disallowed' => 'events_disallowed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'channel_ids' => 'setChannelIds',
        'bridge_ids' => 'setBridgeIds',
        'endpoint_ids' => 'setEndpointIds',
        'device_names' => 'setDeviceNames',
        'events_allowed' => 'setEventsAllowed',
        'events_disallowed' => 'setEventsDisallowed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'channel_ids' => 'getChannelIds',
        'bridge_ids' => 'getBridgeIds',
        'endpoint_ids' => 'getEndpointIds',
        'device_names' => 'getDeviceNames',
        'events_allowed' => 'getEventsAllowed',
        'events_disallowed' => 'getEventsDisallowed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['channel_ids'] = isset($data['channel_ids']) ? $data['channel_ids'] : null;
        $this->container['bridge_ids'] = isset($data['bridge_ids']) ? $data['bridge_ids'] : null;
        $this->container['endpoint_ids'] = isset($data['endpoint_ids']) ? $data['endpoint_ids'] : null;
        $this->container['device_names'] = isset($data['device_names']) ? $data['device_names'] : null;
        $this->container['events_allowed'] = isset($data['events_allowed']) ? $data['events_allowed'] : null;
        $this->container['events_disallowed'] = isset($data['events_disallowed']) ? $data['events_disallowed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this application
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets channel_ids
     *
     * @return \Swagger\Client\Model\ListString
     */
    public function getChannelIds()
    {
        return $this->container['channel_ids'];
    }

    /**
     * Sets channel_ids
     *
     * @param \Swagger\Client\Model\ListString $channel_ids Id's for channels subscribed to.
     *
     * @return $this
     */
    public function setChannelIds($channel_ids)
    {
        $this->container['channel_ids'] = $channel_ids;

        return $this;
    }

    /**
     * Gets bridge_ids
     *
     * @return \Swagger\Client\Model\ListString
     */
    public function getBridgeIds()
    {
        return $this->container['bridge_ids'];
    }

    /**
     * Sets bridge_ids
     *
     * @param \Swagger\Client\Model\ListString $bridge_ids Id's for bridges subscribed to.
     *
     * @return $this
     */
    public function setBridgeIds($bridge_ids)
    {
        $this->container['bridge_ids'] = $bridge_ids;

        return $this;
    }

    /**
     * Gets endpoint_ids
     *
     * @return \Swagger\Client\Model\ListString
     */
    public function getEndpointIds()
    {
        return $this->container['endpoint_ids'];
    }

    /**
     * Sets endpoint_ids
     *
     * @param \Swagger\Client\Model\ListString $endpoint_ids {tech}/{resource} for endpoints subscribed to.
     *
     * @return $this
     */
    public function setEndpointIds($endpoint_ids)
    {
        $this->container['endpoint_ids'] = $endpoint_ids;

        return $this;
    }

    /**
     * Gets device_names
     *
     * @return \Swagger\Client\Model\ListString
     */
    public function getDeviceNames()
    {
        return $this->container['device_names'];
    }

    /**
     * Sets device_names
     *
     * @param \Swagger\Client\Model\ListString $device_names Names of the devices subscribed to.
     *
     * @return $this
     */
    public function setDeviceNames($device_names)
    {
        $this->container['device_names'] = $device_names;

        return $this;
    }

    /**
     * Gets events_allowed
     *
     * @return \Swagger\Client\Model\ListObject
     */
    public function getEventsAllowed()
    {
        return $this->container['events_allowed'];
    }

    /**
     * Sets events_allowed
     *
     * @param \Swagger\Client\Model\ListObject $events_allowed Event types sent to the application.
     *
     * @return $this
     */
    public function setEventsAllowed($events_allowed)
    {
        $this->container['events_allowed'] = $events_allowed;

        return $this;
    }

    /**
     * Gets events_disallowed
     *
     * @return \Swagger\Client\Model\ListObject
     */
    public function getEventsDisallowed()
    {
        return $this->container['events_disallowed'];
    }

    /**
     * Sets events_disallowed
     *
     * @param \Swagger\Client\Model\ListObject $events_disallowed Event types not sent to the application.
     *
     * @return $this
     */
    public function setEventsDisallowed($events_disallowed)
    {
        $this->container['events_disallowed'] = $events_disallowed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


