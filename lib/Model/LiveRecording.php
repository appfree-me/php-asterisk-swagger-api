<?php
/**
 * LiveRecording
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LiveRecording Class Doc Comment
 *
 * @category Class
 * @description A recording that is in progress
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveRecording implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LiveRecording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'format' => 'string',
        'target_uri' => 'string',
        'state' => 'string',
        'duration' => '\Swagger\Client\Model\Int',
        'talking_duration' => '\Swagger\Client\Model\Int',
        'silence_duration' => '\Swagger\Client\Model\Int',
        'cause' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'format' => null,
        'target_uri' => null,
        'state' => null,
        'duration' => null,
        'talking_duration' => null,
        'silence_duration' => null,
        'cause' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'format' => 'format',
        'target_uri' => 'target_uri',
        'state' => 'state',
        'duration' => 'duration',
        'talking_duration' => 'talking_duration',
        'silence_duration' => 'silence_duration',
        'cause' => 'cause'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'format' => 'setFormat',
        'target_uri' => 'setTargetUri',
        'state' => 'setState',
        'duration' => 'setDuration',
        'talking_duration' => 'setTalkingDuration',
        'silence_duration' => 'setSilenceDuration',
        'cause' => 'setCause'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'format' => 'getFormat',
        'target_uri' => 'getTargetUri',
        'state' => 'getState',
        'duration' => 'getDuration',
        'talking_duration' => 'getTalkingDuration',
        'silence_duration' => 'getSilenceDuration',
        'cause' => 'getCause'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['target_uri'] = isset($data['target_uri']) ? $data['target_uri'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['talking_duration'] = isset($data['talking_duration']) ? $data['talking_duration'] : null;
        $this->container['silence_duration'] = isset($data['silence_duration']) ? $data['silence_duration'] : null;
        $this->container['cause'] = isset($data['cause']) ? $data['cause'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Base name for the recording
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Recording format (wav, gsm, etc.)
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets target_uri
     *
     * @return string
     */
    public function getTargetUri()
    {
        return $this->container['target_uri'];
    }

    /**
     * Sets target_uri
     *
     * @param string $target_uri URI for the channel or bridge being recorded
     *
     * @return $this
     */
    public function setTargetUri($target_uri)
    {
        $this->container['target_uri'] = $target_uri;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param \Swagger\Client\Model\Int $duration Duration in seconds of the recording
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets talking_duration
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getTalkingDuration()
    {
        return $this->container['talking_duration'];
    }

    /**
     * Sets talking_duration
     *
     * @param \Swagger\Client\Model\Int $talking_duration Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.
     *
     * @return $this
     */
    public function setTalkingDuration($talking_duration)
    {
        $this->container['talking_duration'] = $talking_duration;

        return $this;
    }

    /**
     * Gets silence_duration
     *
     * @return \Swagger\Client\Model\Int
     */
    public function getSilenceDuration()
    {
        return $this->container['silence_duration'];
    }

    /**
     * Sets silence_duration
     *
     * @param \Swagger\Client\Model\Int $silence_duration Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.
     *
     * @return $this
     */
    public function setSilenceDuration($silence_duration)
    {
        $this->container['silence_duration'] = $silence_duration;

        return $this;
    }

    /**
     * Gets cause
     *
     * @return string
     */
    public function getCause()
    {
        return $this->container['cause'];
    }

    /**
     * Sets cause
     *
     * @param string $cause Cause for recording failure if failed
     *
     * @return $this
     */
    public function setCause($cause)
    {
        $this->container['cause'] = $cause;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


